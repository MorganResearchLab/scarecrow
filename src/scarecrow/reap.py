# -*- coding: utf-8 -*-
"""
#!/usr/bin/env python3
@author: David Wragg
"""

#import os
#import gzip
#import pandas as pd
#import pysam
#import multiprocessing as mp
#from argparse import RawTextHelpFormatter
#import logging
#from scarecrow.logger import log_errors, setup_logger
#from scarecrow.seed import parse_seed_arguments
#from scarecrow.tools import generate_random_string, reverse_complement
#from typing import List, Tuple, Optional, Dict, Any, Union
#import itertools
#from functools import partial
#import ast
#from collections import defaultdict
import os
import gzip
import pandas as pd
import pysam
import multiprocessing as mp
from argparse import RawTextHelpFormatter
import logging
from scarecrow.logger import log_errors, setup_logger
from scarecrow.seed import parse_seed_arguments
from scarecrow.tools import generate_random_string, reverse_complement
from typing import List, Tuple, Optional, Dict, Any, Union
import itertools
from functools import partial
import ast
from collections import defaultdict
from Bio.Seq import Seq  # For faster reverse complement
import numpy as np  # For faster Hamming distance calculation


def parser_reap(parser):
    subparser = parser.add_parser(
        "reap",
        description="""
Extract sequence range from one fastq file of a pair, and annotate the sequence header with barcode 
sequences based on predicted positions generated by scarecrow harvest.

Example:

scarecrow reap --fastqs R1.fastq.gz R2.fastq.gz\n\t--barcode_positions barcode_positions.csv\n\t--barcodes BC1:v1_whitelist:bc1_whitelist.txt BC2:v2_whitelist:bc2_whitelist.txt BC3:v1_whitelist:bc3_whitelist.txt\n\t--read2 0-100 --out cdna.fastq
---
""",
        epilog="The --barcodes <name> must match the barcode_whitelist values in the --barcode_positions file.",
        help="Extract sequence range from fastq files",
        formatter_class=RawTextHelpFormatter,
    )
    subparser.add_argument(
        "--fastqs", 
        nargs="+", 
        help="Pair of FASTQ files")
    subparser.add_argument(
        "-o", "--out",
        metavar="out.fastq",
        help=("Path to output fastq file"),
        type=str,
        default='extracted.fastq',
    )
    subparser.add_argument(
        "-p", "--barcode_positions",
        metavar="barcode_positions",
        help=("File containing barcode positions, output by scarecrow harvest"),
        type=str,
        default=[],
    )
    subparser.add_argument(
        "-j", "--jitter",
        metavar="jitter",
        type=int,
        default=5,
        help='Barcode position jitter [5]',
    )
    subparser.add_argument(
        "-m", "--mismatches",
        metavar="mismatches",
        type=int,
        default=1,
        help='Number of allowed mismatches in barcode [1]',
    )
    group = subparser.add_mutually_exclusive_group(required=True)
    group.add_argument(
        "-1", "--read1",
        metavar="read1_range",
        help=("Sequence range to extract from read1 (e.g. (0-100))"),
        type=str,
        default=None
    )
    group.add_argument(
        "-2", "--read2",
        metavar="read2_range",
        help=("Sequence range to extract from read2 (e.g. 0-100)"),
        type=str,
        default=None
    )
    subparser.add_argument(
        "-c", "--barcodes",
        metavar="barcodes",
        nargs='+', 
        help='Barcode whitelist files in format <name>:<file> (e.g. BC1:barcodes1.txt BC2:barcodes2.txt)',
    )
    subparser.add_argument(
        "-b", "--batch_size",
        metavar="batch_size",
        help=("Number of read pairs per batch to process at a time [10000]"),
        type=int,
        default=10000,
    )
    subparser.add_argument(
        "-@", "--threads",
        metavar="threads",
        help=("Number of processing threads [4]"),
        type=int,
        default=4,
    )
    return subparser

def validate_reap_args(parser, args):
    run_reap(fastqs = [f for f in args.fastqs], 
             barcode_positions = args.barcode_positions,
             output = args.out,
             read1_range = args.read1,
             read2_range = args.read2, 
             barcodes = args.barcodes,
             jitter = args.jitter,
             mismatches = args.mismatches,
             batches = args.batch_size, 
             threads = args.threads)

@log_errors
def run_reap(fastqs: List[str], 
             barcode_positions: str,
             output: str = 'extracted.fastq',
             read1_range: Optional[str] = None,
             read2_range: Optional[str] = None,
             barcodes: List[str] = None,
             jitter: int = 5,
             mismatches: int = 1,
             batches: int = 10000,
             threads: int = 4) -> None:
    """
    Main function to extract sequences with barcode headers
    """    
    # Global logger setup
    logfile = '{}_{}.{}'.format('./scarecrow_reap', generate_random_string(), 'log')
    logger = setup_logger(logfile)
    logger.info(f"logfile: ${logfile}")

    # Extract barcodes and convert whitelist to set
    expected_barcodes = parse_seed_arguments(barcodes)  
    logger.info(f"Barcode whitelist:")
    for key, barcode in expected_barcodes.items():
        expected_barcodes[key] = set(barcode)
        logger.info(f"{key}: {barcode}")

    # Extract barcodes and target sequence
    extract_sequences_parallel_optimized(
        fastq_files = [f for f in fastqs],
        barcode_positions_file = barcode_positions,
        barcode_sequences = expected_barcodes,
        output = output,
        read1_range = read1_range,
        read2_range = read2_range,
        jitter = jitter,
        mismatches = mismatches,
        batch_size = batches,
        threads = threads
    )
    
    # Process fastq header
    barcode_counts, cell_barcodes = process_fastq_headers(output)
    # Log the barcode counts for each position
    for i, counts in enumerate(barcode_counts):
        for barcode, count in counts.items():
            logger.info(f"Barcode index: {i + 1}\tBarcode: {barcode}\tCount: {count}")
        barcodes = pd.DataFrame(list(barcode_counts[i].items()), columns=["Barcode", "Count"]).sort_values(by="Count")
        barcodes.insert(0, "Index", i + 1)
        if i == 0:
            barcodes.to_csv('{}.{}'.format(output, 'barcode.counts.csv'), index = False)
        else:
            barcodes.to_csv('{}.{}'.format(output, 'barcode.counts.csv'), index = False, mode = "a", header = False)

    # Log the combined barcode counts (i.e. cell sequence counts)
    for cell, count in cell_barcodes.items():
        logger.info(f"Cell barcode: {cell}\tCount: {count}")
    barcodes = pd.DataFrame(list(cell_barcodes.items()), columns=["CellBarcode", "Count"]).sort_values(by="Count")
    barcodes.to_csv('{}.{}'.format(output, 'cell.counts.csv'), index = False)


def parse_range(range_str: str) -> Tuple[int, int]:
    """Parse string range like '0-100' into start and end integers"""
    start, end = map(int, range_str.split('-'))
    return (start, end)

def prepare_barcode_configs(barcode_positions: pd.DataFrame, jitter: int) -> List[Dict[str, Any]]:
    """Prepare barcode extraction configurations"""
    configs = []
    for idx, row in barcode_positions.iterrows():
        config = {
            'index': idx,
            'file_index': 0 if row['read'] == 'read1' else 1,
            'start': row['start'],
            'end': row['end'],
            'orientation': row['orientation'],
            'jittered_start': max(0, row['start'] - jitter),
            'jittered_end': row['end'] + jitter,
            'whitelist': row['barcode_whitelist']
        }
        configs.append(config)
    return configs

@log_errors
def extract_sequences_parallel(
    fastq_files: List[str],
    barcode_positions_file: str,
    barcode_sequences: Optional[Union[Dict[str, List[str]], List[str]]] = None,
    output: str = 'extracted.fastq',
    read1_range: Optional[str] = None,
    read2_range: Optional[str] = None,
    jitter: int = 5,
    mismatches: int = 1,
    batch_size: int = 100000,
    threads: int = None
) -> None:
    """
    Extract sequences to FASTQ with modified headers using parallel processing
    """
    # Setup logging
    logfile = '{}_{}.{}'.format('./scarecrow_reap_barcodes', generate_random_string(), 'log')
    logger = setup_logger(logfile)
    logger.info(f"logfile: ${logfile}")

    # Read and parse barcode positions
    if os.path.exists(barcode_positions_file):
        barcode_positions = pd.read_csv(barcode_positions_file)
        logger.info(f"{barcode_positions}")
    else:
        logger.warning(f"File not found: {barcode_positions_file}")
        raise RuntimeError(f"File not found: {barcode_positions_file}")

    # Parse read ranges
    parsed_read1_range = parse_range(read1_range) if read1_range else None
    parsed_read2_range = parse_range(read2_range) if read2_range else None

    # Prepare barcode configurations
    barcode_configs = prepare_barcode_configs(barcode_positions, jitter)

    # Set up parallel processing
    threads = threads or (mp.cpu_count() - 1 or 1)

    # Ensure output directory exists
    os.makedirs(os.path.dirname(output) or '.', exist_ok=True)

    # Process files
    read1, read2 = fastq_files
    
    # Test if fastq files exist
    if os.path.exists(read1) is False:
        logger.warning(f"File not found: {read1}")        
        raise RuntimeError(f"File not found: {read1}")
    if os.path.exists(read2) is False:
        logger.warning(f"File not found: {read2}")
        raise RuntimeError(f"File not found: {read2}")
    
    out_mode = 'wt' if not output.endswith('.gz') else 'wt'
    open_func = gzip.open if output.endswith('.gz') else open

    with pysam.FastqFile(read1) as r1, \
        pysam.FastqFile(read2) as r2, \
        open_func(output, out_mode) as out_fastq:

        # Create read pair iterator
        read_pairs = zip(r1, r2)

        # Prepare partial function for multiprocessing
        process_batch_func = partial(
            process_read_batch,
            barcode_configs = barcode_configs,
            barcode_sequences = barcode_sequences,
            mismatches = mismatches,
            read1_range = parsed_read1_range,
            read2_range = parsed_read2_range,
            logfile = logfile
        )

        # Process in batches with multiprocessing
        with mp.Pool(processes=threads) as pool:
            # Create batches of reads
            batch_iterator = iter(lambda: list(itertools.islice(read_pairs, batch_size)), [])

            for batch in batch_iterator:
                if not batch:
                    break

                # Process batch in parallel
                processed_entries = pool.map(process_batch_func, [batch])

                # Flatten and write results
                for entry in itertools.chain.from_iterable(processed_entries):
                    out_fastq.write(entry)


@log_errors
def match_barcode(sequence, barcodes, orientation, max_mismatches, jitter):
    """
    Find all positions of barcodes in a sequence with tolerance for mismatches.

    Args:
        sequence: query sequence to search for barcodes in
        barcodes: whitelist of barcode sequences
        orientation: orientation of barcode sequence to check
        max_mismatches: max number of mismatches allowed between query and barcode sequences
        jitter: jitter distance
    
    Returns:
        List of barcode matches
    """
    logger = logging.getLogger('scarecrow')

    def hamming_distance(s1, s2):
        """Calculate Hamming distance between two strings."""
        return sum(c1 != c2 for c1, c2 in zip(s1, s2))
    
    barcode_matches = []
    matchfound = False

    # Perform set check before resorting to calculating Hamming distances
    candidate = sequence
    # Easier to reverse complement query than whitelist if required
    if orientation == 'reverse':
            candidate = reverse_complement(candidate) 
    # Slide an n-character window over the query sequence
    for i in range(len(candidate) - len(list(barcodes)[0]) + 1):  # Sliding window of size 8
        substring = candidate[i:i + len(list(barcodes)[0])]
        if substring in barcodes:  # Fast set lookup
            matchfound = True
            match_details = {
                'barcode': substring,
                'sequence': candidate,
                'start': i + 1, # for 1-based start
                'end': i + len(candidate),
                'mismatches': 0,
                'peak_dist': abs(jitter-i)
            }
            barcode_matches.append(match_details)

    # If no precise match then resort to Hamming distances
    if matchfound is False:
        for start in range(len(sequence)):             
                # Assumption here is that all barcodes on a whitelist are of same length       
                for end in range(start + len(list(barcodes)[0])-1, len(sequence)+1):

                    # Get fastq sequence
                    candidate = sequence[start:end]

                    for barcode in barcodes:
                        if orientation == 'reverse':
                            barcode = reverse_complement(barcode)
        
                        if len(candidate) == len(barcode):
                            mismatches = hamming_distance(candidate, barcode)
                            if mismatches <= max_mismatches:
                                match_details = {
                                    'barcode': barcode,
                                    'sequence': candidate,
                                    'start': start + 1, # for 1-based start
                                    'end': end,
                                    'mismatches': mismatches,
                                    'peak_dist': abs(jitter-start)
                                }
                                barcode_matches.append(match_details)
    
    barcode_matches.sort(key=lambda x: (x['mismatches'], x['peak_dist'], x['start']))
    return barcode_matches

@log_errors   
def process_read_batch(
    read_batch: List[Tuple[Any, Any]], 
    barcode_configs: List[Dict[str, Any]], 
    barcode_sequences: Optional[Union[Dict[str, List[str]], List[str]]],
    read1_range: Optional[Tuple[int, int]], 
    read2_range: Optional[Tuple[int, int]],
    mismatches: int = 1,
    logfile: str = None
) -> List[str]:
    """
    Process a batch of reads, extracting barcodes and sequences
    
    Args:
        read_batch: List of tuples containing (read1, read2) entries
        barcode_configs: Configurations for barcode extraction
        barcode_sequences: Barcode whitelist dictionary of sequences
        read1_range: Range to extract from read1 if applicable
        read2_range: Range to extract from read2 if applicable
        mismatches: Integer for max number of mismatches between query and barcode sequences
        logfile: Filename for logger to write to
    
    Returns:
        List of formatted FASTQ entries
    """
    if logfile:
        logger = setup_logger(logfile)
    else:
        logger = logging.getLogger('scarecrow')

    output_entries = []
    for r1_entry, r2_entry in read_batch:
        # Extract barcodes
        barcodes = []

        '''
        Need to try implementing a set check before running the hamming distance check
        s1_set <- set([s1])
        s1_set.intersection(white_set)
        If there is a perfect barcode then the s1_set.intersection will be > 0 and will (hopefully) reveal the barcode
        If there is not a perfect match, then we do the hamming distance check
        '''
        for config in barcode_configs:
            seq = r1_entry.sequence if config['file_index'] == 0 else r2_entry.sequence
            barcode = seq[config['jittered_start']:config['jittered_end']]           
            
            # Identify associated whitelist barcode sequences
            whitelist = ast.literal_eval(config['whitelist'])[0]
            if whitelist in barcode_sequences:
                whitelist_barcodes = barcode_sequences[whitelist]                
                orientation = False if config['orientation'] == 'forward' else True                
                matches = match_barcode(sequence = barcode, barcodes = whitelist_barcodes, 
                                    orientation = orientation, max_mismatches = mismatches,
                                    jitter = abs(config['jittered_start'] - config['start']))
                if matches:
                    logger.info(f"{r1_entry.name}")
                    logger.info(f"{seq}")
                    logger.info(f"Peak target:\n{list(config.items())[2:]}")
                    logger.info(f"Best matched barcode (peak distance, mismatches, start):\t{matches[0]['barcode']}")
                    # Record the best matching barcode for use in the sequence header
                    barcodes.append(matches[0]['barcode'])
                else:
                    barcodes.append('null')

        # Determine which read to extract from
        if read1_range:
            extract_seq = r1_entry.sequence[read1_range[0]:read1_range[1]]
            extract_qual = r1_entry.quality[read1_range[0]:read1_range[1]]
            source_entry = r1_entry
        else:
            extract_seq = r2_entry.sequence[read2_range[0]:read2_range[1]]
            extract_qual = r2_entry.quality[read2_range[0]:read2_range[1]]
            source_entry = r2_entry
        
        # Modify header with barcodes
        new_header = f"{source_entry.name} {source_entry.comment} barcodes={('_').join(barcodes)}"
        
        # Create FASTQ entry
        output_entries.append(f"@{new_header}\n{extract_seq}\n+\n{extract_qual}\n")
    
    return output_entries


def process_fastq_headers(file_path):
    """
    Process fastq header to report on barcode counts

    Args:
        file_path: fastq file to operate on
    
    Returns:
        List of barcode counts and list of barcode combination counts
    """

    # Create a list of dictionaries, one for each barcode position
    barcode_counts = []
    cell_barcodes = defaultdict(int)

    # Open the FASTQ file using pysam
    with pysam.FastxFile(file_path) as fastq_file:
        for entry in fastq_file:
            # Extract the header line
            header = entry.comment

            # Check if the header contains 'barcodes='
            if 'barcodes=' in header:
                # Extract the barcodes string (everything after 'barcodes=')
                barcodes_str = header.split('barcodes=')[1]
                cell_barcodes[barcodes_str] += 1
                
                # Split the barcodes string by underscore
                barcodes = barcodes_str.split('_')
                
                # Ensure barcode_counts has enough dictionaries for all barcode positions
                while len(barcode_counts) < len(barcodes):
                    barcode_counts.append(defaultdict(int))
                
                # Update counts in the corresponding dictionaries
                for i, barcode in enumerate(barcodes):
                    barcode_counts[i][barcode] += 1

    return barcode_counts, cell_barcodes








def match_barcode_optimized(sequence: str, barcodes: set, orientation: str, max_mismatches: int, jitter: int) -> List[Dict]:
    """
    Optimized barcode matching function using vectorized operations and early exits.
    """
    barcode_len = len(next(iter(barcodes)))  # Get length of first barcode
    candidate = sequence if orientation != 'reverse' else str(Seq(sequence).reverse_complement())
    
    # Quick exact match check using set operations
    matches = []
    for i in range(len(candidate) - barcode_len + 1):
        substring = candidate[i:i + barcode_len]
        if substring in barcodes:
            return [{
                'barcode': substring,
                'sequence': candidate,
                'start': i + 1,
                'end': i + barcode_len,
                'mismatches': 0,
                'peak_dist': abs(jitter-i)
            }]

    # If no exact match, use numpy for efficient Hamming distance calculation
    if max_mismatches > 0:
        barcode_array = np.array([list(b) for b in barcodes])
        for i in range(len(candidate) - barcode_len + 1):
            substr_array = np.array(list(candidate[i:i + barcode_len]))
            # Vectorized Hamming distance calculation
            distances = np.sum(barcode_array != substr_array, axis=1)
            matches.extend([{
                'barcode': b,
                'sequence': candidate,
                'start': i + 1,
                'end': i + barcode_len,
                'mismatches': int(d),
                'peak_dist': abs(jitter-i)
            } for b, d in zip(barcodes, distances) if d <= max_mismatches])

    matches.sort(key=lambda x: (x['mismatches'], x['peak_dist'], x['start']))
    return matches

def process_read_batch_optimized(read_batch: List[Tuple], 
                               barcode_configs: List[Dict], 
                               barcode_sequences: Dict,
                               read1_range: Optional[Tuple], 
                               read2_range: Optional[Tuple],
                               mismatches: int = 1,
                               logfile: str = None) -> List[str]:
    """
    Optimized batch processing with minimal logging and efficient string operations.
    """
    logger = setup_logger(logfile) if logfile else logging.getLogger('scarecrow')
    output_entries = []
    
    # Pre-compute ranges and configurations
    extract_range = read1_range if read1_range else read2_range
    read_index = 0 if read1_range else 1
    
    # Pre-process barcode configurations
    config_map = {(config['file_index'], config['whitelist']): 
                 (config['jittered_start'], config['jittered_end'], 
                  config['orientation'], abs(config['jittered_start'] - config['start']))
                 for config in barcode_configs}

    for reads in read_batch:
        barcodes = []
        for config in barcode_configs:
            seq = reads[config['file_index']].sequence
            start, end, orientation, jitter_dist = config_map[(config['file_index'], config['whitelist'])]
            barcode = seq[start:end]
            
            whitelist = ast.literal_eval(config['whitelist'])[0]
            if whitelist in barcode_sequences:
                matches = match_barcode_optimized(
                    barcode,
                    barcode_sequences[whitelist],
                    orientation == 'reverse',
                    mismatches,
                    jitter_dist
                )
                barcodes.append(matches[0]['barcode'] if matches else 'null')
            else:
                barcodes.append('null')

        # Extract sequence and create output
        source_entry = reads[read_index]
        extract_seq = source_entry.sequence[extract_range[0]:extract_range[1]]
        extract_qual = source_entry.quality[extract_range[0]:extract_range[1]]
        
        # Use join for efficient string concatenation
        header_parts = [source_entry.name, source_entry.comment, f"barcodes={('_').join(barcodes)}"]
        output_entries.append(f"@{' '.join(header_parts)}\n{extract_seq}\n+\n{extract_qual}\n")

    return output_entries

def extract_sequences_parallel_optimized(
    fastq_files: List[str],
    barcode_positions_file: str,
    barcode_sequences: Dict[str, List[str]],
    output: str = 'extracted.fastq',
    read1_range: Optional[str] = None,
    read2_range: Optional[str] = None,
    jitter: int = 5,
    mismatches: int = 1,
    batch_size: int = 100000,
    threads: Optional[int] = None
) -> None:
    """
    Optimized parallel sequence extraction with improved I/O handling and memory management.
    """
    logger = setup_logger(f'./scarecrow_reap_{generate_random_string()}.log')
    
    # Load and parse configurations once
    barcode_positions = pd.read_csv(barcode_positions_file)
    barcode_configs = prepare_barcode_configs(barcode_positions, jitter)
    
    # Parse ranges once
    parsed_read1_range = parse_range(read1_range) if read1_range else None
    parsed_read2_range = parse_range(read2_range) if read2_range else None
    
    # Optimize thread count
    threads = min(threads or mp.cpu_count(), batch_size // 1000 or 1)
    
    # Set up output handling
    out_mode = 'wt' if not output.endswith('.gz') else 'wt'
    open_func = gzip.open if output.endswith('.gz') else open
    os.makedirs(os.path.dirname(output) or '.', exist_ok=True)

    # Process files with optimized batching
    with pysam.FastqFile(fastq_files[0]) as r1, \
         pysam.FastqFile(fastq_files[1]) as r2, \
         open_func(output, out_mode) as out_fastq:
        
        # Create efficient process_batch function
        process_batch_func = partial(
            process_read_batch_optimized,
            barcode_configs=barcode_configs,
            barcode_sequences=barcode_sequences,
            mismatches=mismatches,
            read1_range=parsed_read1_range,
            read2_range=parsed_read2_range
        )

        # Efficient parallel processing with proper chunking
        with mp.Pool(processes=threads) as pool:
            read_pairs = zip(r1, r2)
            while True:
                batch = list(itertools.islice(read_pairs, batch_size))
                if not batch:
                    break
                    
                # Process batch and write results immediately
                for processed_entries in pool.imap_unordered(process_batch_func, [batch]):
                    out_fastq.writelines(processed_entries)
