#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@author: David Wragg
"""

from argparse import RawTextHelpFormatter
from scarecrow.fastq_logging import log_errors, setup_logger, logger
import numpy as np
import pandas as pd
from scipy.signal import find_peaks

def parser_harvest(parser):
    subparser = parser.add_parser(
        "harvest",
        description="""
Harvest barcode start-end positions from barcode alignment distributions.

Example:
---
""",
        help="Harvest barcode start-end positions",
        formatter_class=RawTextHelpFormatter,
    )
    subparser.add_argument("barcodes", nargs="+", help="List of barcode CSV files")
    subparser.add_argument(
        "-o", "--out",
        metavar="barcodes.positions",
        help=("Path to output barcode positions file"),
        type=str,
        default="./barcodes.positions",
    )
    subparser.add_argument(
        "-b", "--barcode_count",
        metavar="barcode_count",
        help=("Number of barcodes expected [3]"),
        type=int,
        default=3,
    )    
    subparser.add_argument(
        "-l", "--logfile",
        metavar="logfile",
        help=("File to write log to"),
        type=str,
        default="./scarecrow.log",
    )
    return subparser

def validate_harvest_args(parser, args):
    run_harvest(barcodes = args.barcodes, output_file = args.out, num_barcodes = args.barcode_count,
                logfile = args.logfile)

def run_harvest(barcodes, output_file, num_barcodes, logfile):
    """
    Extract barcode positions from distribution of barcode alignments 
    Expects as an input a series of CSV files generated by scarecrow barcodes
    """
    
    # Global logger setup
    logger = setup_logger(logfile)

    # Open file for writing output
    if output_file:
        f = open(f"{output_file}", 'w')

    # Read barcode CSV files into a dataframe using pandas
    #barcode_data = [pd.read_csv(file, sep="\t") for file in barcodes]
    results = get_barcode_peaks(barcodes, num_barcodes)

    print(f"{pd.DataFrame(results)}")
    return 

@log_errors
def get_barcode_peaks(barcodes: list, num_barcodes: int):
    """
    Read barcode CSV data in and identify peaks
    """
    barcode_data = pd.concat([pd.read_csv(file, sep='\t') for file in barcodes], ignore_index=True)

    # Identify barcode alignment peaks
    results = []
    barcode_groups = barcode_data.groupby(["read", "barcode_whitelist", "orientation"])
    for (read, barcode_whitelist, orientation), group in barcode_groups:
        # Use the 'start' column as the distribution
            # Create a histogram of start positions
        hist, bin_edges = np.histogram(group["start"])    
        # Run the peak detection
        peaks = find_top_peaks(hist, num_barcodes)    
        # Convert bin indices to start positions
        peaks_with_positions = [(int(bin_edges[p]), int(count)) for p, count in peaks]    
        # Store the results
        results.append({
            "read": read,
            "barcode_whitelist": barcode_whitelist,
            "orientation": orientation,
            "peaks": peaks_with_positions
        })
        # write to logfile
        logger.info(f"read: {read} - whitelist: {barcode_whitelist} - orientation: {orientation} - peaks: {peaks_with_positions}")

    return results


# Peak detection function
def find_top_peaks(distribution, num_peaks):
    """
    Find top peaks in a distribution of counts.
    """
    peaks, _ = find_peaks(distribution)
    peak_counts = distribution[peaks]
    peaks_with_counts = list(zip(peaks, peak_counts))
    top_peaks = sorted(peaks_with_counts, key=lambda x: x[1], reverse=True)[:num_peaks]
    return top_peaks


